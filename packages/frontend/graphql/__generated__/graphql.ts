/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** A simple DateISOValue parser */
  DateISOValue: { input: any; output: any; }
  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */
  DateTime: { input: any; output: any; }
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: { input: any; output: any; }
  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSONObject: { input: any; output: any; }
};

export type AccessUserPayload = {
  __typename?: 'AccessUserPayload';
  accessToken?: Maybe<Scalars['String']['output']>;
};

export type Address = {
  __typename?: 'Address';
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['String']['output'];
  phone: Scalars['String']['output'];
  state?: Maybe<Scalars['String']['output']>;
  streetAddress1?: Maybe<Scalars['String']['output']>;
  streetAddress2?: Maybe<Scalars['String']['output']>;
  tag?: Maybe<Scalars['String']['output']>;
  type: AddressTypeEntity;
  typeId: Scalars['String']['output'];
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  zipCode?: Maybe<Scalars['String']['output']>;
};

/** The type of entity associated with the address */
export enum AddressTypeEntity {
  Location = 'LOCATION',
  Organization = 'ORGANIZATION',
  Subsidiary = 'SUBSIDIARY'
}

export type Attachment = {
  __typename?: 'Attachment';
  createdAt: Scalars['DateTime']['output'];
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  key?: Maybe<Scalars['String']['output']>;
  metaType: MetaType;
  signedUrl?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type: AttachmentType;
  typeId: Scalars['String']['output'];
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

/** The type of entity associated with the attachment */
export enum AttachmentType {
  Attachment = 'ATTACHMENT',
  Location = 'LOCATION',
  LocationLog = 'LOCATION_LOG',
  Organization = 'ORGANIZATION',
  Subsidiary = 'SUBSIDIARY',
  User = 'USER'
}

export type BibsorPayload = {
  __typename?: 'BIBSORPayload';
  /** individual entity's unique ID generated by BIB. For example: 68FECCD3-4FDD-4A1C-BE32-32727FA8C834 - BIB will generate this if not sent */
  guid?: Maybe<Scalars['String']['output']>;
  logId: Scalars['String']['output'];
  responseCode: Scalars['String']['output'];
  responseText: Scalars['String']['output'];
  result: Scalars['String']['output'];
};

export type BaseGranularControlsResponse = {
  __typename?: 'BaseGranularControlsResponse';
  createdAt: Scalars['DateTime']['output'];
  entityId: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  permissionId: Scalars['String']['output'];
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type BaseOrganizationResponse = {
  __typename?: 'BaseOrganizationResponse';
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type BillingAddress = {
  city: Scalars['String']['input'];
  country: Scalars['String']['input'];
  line1: Scalars['String']['input'];
  line2?: InputMaybe<Scalars['String']['input']>;
  state: Scalars['String']['input'];
  zip: Scalars['String']['input'];
};

export type BillingAddressResponse = {
  __typename?: 'BillingAddressResponse';
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  line1?: Maybe<Scalars['String']['output']>;
  line2?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  zip?: Maybe<Scalars['String']['output']>;
};

export type CardResponse = {
  __typename?: 'CardResponse';
  brand: Scalars['String']['output'];
  expiry_month: Scalars['Float']['output'];
  expiry_year: Scalars['Float']['output'];
  first_name?: Maybe<Scalars['String']['output']>;
  iin: Scalars['String']['output'];
  last4: Scalars['String']['output'];
  last_name?: Maybe<Scalars['String']['output']>;
};

export type ChartDataItem = {
  __typename?: 'ChartDataItem';
  count: Scalars['Float']['output'];
  period: Scalars['String']['output'];
  status: Scalars['String']['output'];
};

export type ChartDataPayload = {
  __typename?: 'ChartDataPayload';
  chartData?: Maybe<Array<Maybe<ChartDataItem>>>;
  status: Scalars['String']['output'];
  totalCount: Scalars['Float']['output'];
  trends: Scalars['Float']['output'];
};

export type ContactInformation = {
  addressTag: Scalars['String']['input'];
  /** Mandatory to check for Existing Logs */
  email: Scalars['String']['input'];
  fullName?: InputMaybe<Scalars['String']['input']>;
  legalFirstName: Scalars['String']['input'];
  /** Mandatory to check for Existing Logs */
  legalFullName: Scalars['String']['input'];
  legalLastName: Scalars['String']['input'];
  legalMiddleName?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
};

export type Context = {
  __typename?: 'Context';
  id_type_selected?: Maybe<Scalars['String']['output']>;
  identification_ocr_response?: Maybe<IdentificationOcrResponse>;
  pdf417_data?: Maybe<Scalars['String']['output']>;
  scan_retries?: Maybe<Scalars['Float']['output']>;
};

export type CouponResponse = {
  __typename?: 'CouponResponse';
  currency_code?: Maybe<Scalars['String']['output']>;
  discount_amount?: Maybe<Scalars['Float']['output']>;
  discount_percentage?: Maybe<Scalars['Float']['output']>;
  discount_type: Scalars['String']['output'];
  duration_type: Scalars['String']['output'];
  id: Scalars['String']['output'];
  name: Scalars['String']['output'];
  period?: Maybe<Scalars['Float']['output']>;
  period_unit?: Maybe<Scalars['String']['output']>;
};

export type CreateAddressInput = {
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  phone: Scalars['String']['input'];
  state?: InputMaybe<Scalars['String']['input']>;
  streetAddress1?: InputMaybe<Scalars['String']['input']>;
  streetAddress2?: InputMaybe<Scalars['String']['input']>;
  tag?: InputMaybe<Scalars['String']['input']>;
  type: AddressTypeEntity;
  /** Type ID only to be sent while creating a new address using createAddress mutation */
  typeId?: InputMaybe<Scalars['String']['input']>;
  zipCode?: InputMaybe<Scalars['String']['input']>;
};

export type CreateCustomerInput = {
  billingAddress: BillingAddress;
  email: Scalars['String']['input'];
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
  subsidiaryId: Scalars['String']['input'];
};

export type CreateDisputeInput = {
  disputerInfo: Scalars['String']['input'];
  locationLogId: Scalars['String']['input'];
};

export type CreateLocationInput = {
  addresses?: InputMaybe<Array<CreateAddressInput>>;
  boarding?: InputMaybe<Scalars['Boolean']['input']>;
  externalId?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  subsidiaryId: Scalars['String']['input'];
  workflowIds: Array<Scalars['String']['input']>;
};

export type CreateOrganizationConfigInput = {
  moduleType: Module_Type;
  organizationId: Scalars['String']['input'];
  status: Array<Location_Log_Status>;
};

export type CreateOrganizationInput = {
  name: Scalars['String']['input'];
  planId?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type CreatePaymentIntentInput = {
  coupon?: InputMaybe<Scalars['String']['input']>;
  priceId?: InputMaybe<Scalars['String']['input']>;
  subsidiaryId: Scalars['String']['input'];
};

export type CreatePaymentIntentResponse = {
  __typename?: 'CreatePaymentIntentResponse';
  paymentIntent: PaymentIntentResponse;
  price: ItemPriceResponse;
};

export type CreatePaymentSourceInput = {
  subsidiaryId: Scalars['String']['input'];
  token: Scalars['String']['input'];
};

export type CreatePermissionInput = {
  canCreate: Scalars['Boolean']['input'];
  canDelete: Scalars['Boolean']['input'];
  canUpdate: Scalars['Boolean']['input'];
  canView: Scalars['Boolean']['input'];
  entityIds?: InputMaybe<Array<Scalars['String']['input']>>;
  moduleName: PermissionModuleEnumEntity;
};

export type CreateRoleInput = {
  description: Scalars['String']['input'];
  name: Scalars['String']['input'];
};

export type CreateSubscriptionInput = {
  coupon?: InputMaybe<Scalars['String']['input']>;
  paymentIntentId: Scalars['String']['input'];
  subsidiaryId: Scalars['String']['input'];
};

export type CreateSubsidiaryInput = {
  address?: InputMaybe<CreateAddressInput>;
  contact?: InputMaybe<Scalars['String']['input']>;
  ein?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  organizationId?: InputMaybe<Scalars['String']['input']>;
  priceId?: InputMaybe<Scalars['String']['input']>;
};

export type CreateTaskInput = {
  data?: InputMaybe<Scalars['JSON']['input']>;
  failureId?: InputMaybe<Scalars['String']['input']>;
  intermediateId?: InputMaybe<Scalars['String']['input']>;
  successId?: InputMaybe<Scalars['String']['input']>;
  taskId: Scalars['String']['input'];
};

export type CreateWorkflowInput = {
  description: Scalars['String']['input'];
  name: Scalars['String']['input'];
  organizationId: Scalars['String']['input'];
  tasks: Array<CreateTaskInput>;
};

export type CustomerResponse = {
  __typename?: 'CustomerResponse';
  billing_address?: Maybe<BillingAddressResponse>;
  card_status?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  first_name?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  last_name?: Maybe<Scalars['String']['output']>;
  meta_data?: Maybe<Scalars['JSONObject']['output']>;
  object?: Maybe<Scalars['String']['output']>;
  primary_payment_source_id?: Maybe<Scalars['String']['output']>;
};

export type DeleteAddressInput = {
  id: Scalars['String']['input'];
};

export type Dispute = {
  __typename?: 'Dispute';
  createdAt: Scalars['DateTime']['output'];
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  disputerInfo: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type DocumentMetadata = {
  __typename?: 'DocumentMetadata';
  Pages: Scalars['Float']['output'];
};

export type ExtractedData = {
  __typename?: 'ExtractedData';
  address?: Maybe<Scalars['String']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  date_of_birth?: Maybe<Scalars['String']['output']>;
  date_of_issue?: Maybe<Scalars['String']['output']>;
  document_number?: Maybe<Scalars['String']['output']>;
  first_name?: Maybe<Scalars['String']['output']>;
  id_type?: Maybe<IdType>;
  last_name?: Maybe<Scalars['String']['output']>;
  middle_name?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  state_name?: Maybe<Scalars['String']['output']>;
  suffix?: Maybe<Scalars['String']['output']>;
  zip_code?: Maybe<Scalars['String']['output']>;
};

export type FilterLocationsPayload = {
  __typename?: 'FilterLocationsPayload';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type ForgotPasswordInput = {
  email: Scalars['String']['input'];
  organizationSlug: Scalars['String']['input'];
};

export type GetAllWorkflowsInput = {
  from?: InputMaybe<Scalars['String']['input']>;
  isArchived?: InputMaybe<Scalars['Boolean']['input']>;
  keyword?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  paginationOptions: PaginationInput;
  to?: InputMaybe<Scalars['String']['input']>;
};

export type GetCountsPayload = {
  __typename?: 'GetCountsPayload';
  locationsCount?: Maybe<Scalars['Float']['output']>;
  organizationsCount?: Maybe<Scalars['Float']['output']>;
  subsidiariesCount?: Maybe<Scalars['Float']['output']>;
};

export type GetCouponInput = {
  coupon: Scalars['String']['input'];
};

export type GetCustomerPaymentSourcesInput = {
  pagination: SubscriptionPaginationInput;
  subsidiaryId: Scalars['String']['input'];
};

export type GetLocationsByWorkflowPayload = {
  __typename?: 'GetLocationsByWorkflowPayload';
  count: Scalars['Float']['output'];
  locations?: Maybe<Array<Maybe<Location>>>;
};

export type GetRoleByIdInput = {
  id: Scalars['String']['input'];
};

export type GetRoleByIdResponse = {
  __typename?: 'GetRoleByIdResponse';
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  organization: BaseOrganizationResponse;
  organizationId: Scalars['String']['output'];
  permissions: Array<PermissionWithGranularControlsResponse>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type GetSubscriptionPlansInput = {
  organizationId?: InputMaybe<Scalars['String']['input']>;
};

export type GetUserByIdInput = {
  organizationId: Scalars['String']['input'];
  userId: Scalars['String']['input'];
};

export type GetWidgetCountInput = {
  organizationId?: InputMaybe<Scalars['String']['input']>;
  subsidiaryIds?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type GranularControls = {
  __typename?: 'GranularControls';
  createdAt: Scalars['DateTime']['output'];
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  entityId: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  permission?: Maybe<Permission>;
  permissionId: Scalars['String']['output'];
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

/** The state property provided by BIB-ID-SCAN API - the state in which the current scan is in */
export enum IdScanState {
  Complete = 'COMPLETE',
  Created = 'CREATED',
  DataValidationError = 'DATA_VALIDATION_ERROR',
  Error = 'ERROR',
  IdError = 'ID_ERROR',
  IdRequestingScan = 'ID_REQUESTING_SCAN',
  IdScanError = 'ID_SCAN_ERROR',
  IdSubmittedNeedsScan = 'ID_SUBMITTED_NEEDS_SCAN',
  NonPassportTypeSubmitted = 'NON_PASSPORT_TYPE_SUBMITTED',
  PassportTypeSubmitted = 'PASSPORT_TYPE_SUBMITTED',
  PortraitSubmitted = 'PORTRAIT_SUBMITTED',
  RequestingId = 'REQUESTING_ID',
  RequestingIdType = 'REQUESTING_ID_TYPE',
  RequestingManualEntry = 'REQUESTING_MANUAL_ENTRY',
  RequestingPortrait = 'REQUESTING_PORTRAIT',
  Started = 'STARTED',
  Starting = 'STARTING',
  TruncatedData = 'TRUNCATED_DATA'
}

export type IdScanCreateSessionInput = {
  callback_url?: InputMaybe<Scalars['String']['input']>;
  failure_redirect_url: Scalars['String']['input'];
  redirect_url: Scalars['String']['input'];
};

export type IdScanCreateSessionResponse = {
  __typename?: 'IdScanCreateSessionResponse';
  html: Scalars['String']['output'];
  qrcode: Scalars['String']['output'];
  session_id: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type IdScanSessionPayload = {
  __typename?: 'IdScanSessionPayload';
  active_until?: Maybe<Scalars['DateISOValue']['output']>;
  additional_required_fields?: Maybe<Scalars['JSON']['output']>;
  callback_url: Scalars['String']['output'];
  client_id: Scalars['String']['output'];
  context: Context;
  created_at?: Maybe<Scalars['DateISOValue']['output']>;
  failure_redirect_url: Scalars['String']['output'];
  id: Scalars['String']['output'];
  manual_allowed: Scalars['Boolean']['output'];
  max_seconds_between: Scalars['Float']['output'];
  output: Output;
  portrait_url: Scalars['String']['output'];
  redirect_url: Scalars['String']['output'];
  retries_allowed: Scalars['Float']['output'];
  secret: Scalars['String']['output'];
  state: IdScanState;
  updated_at?: Maybe<Scalars['DateISOValue']['output']>;
};

/** The id_type property provided by BIB-ID-SCAN API - within extracted data */
export enum IdType {
  DriverLicense = 'DRIVER_LICENSE',
  GovernmentId = 'GOVERNMENT_ID',
  Passport = 'PASSPORT'
}

export type IdentificationOcrResponse = {
  __typename?: 'IdentificationOcrResponse';
  error?: Maybe<Scalars['Boolean']['output']>;
  error_message?: Maybe<Scalars['String']['output']>;
  normalized_fields?: Maybe<Scalars['JSON']['output']>;
  raw_data?: Maybe<RawData>;
};

export type IdentityDocument = {
  __typename?: 'IdentityDocument';
  DocumentIndex?: Maybe<Scalars['String']['output']>;
  IdentityDocumentFields?: Maybe<Array<Maybe<IdentityDocumentField>>>;
};

export type IdentityDocumentField = {
  __typename?: 'IdentityDocumentField';
  Type: Type;
  ValueDetection?: Maybe<ValueDetection>;
};

export type InviteUserInput = {
  boarding?: InputMaybe<Scalars['Boolean']['input']>;
  email: Scalars['String']['input'];
  existing?: InputMaybe<Scalars['Boolean']['input']>;
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
  organizationId?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  roleIds: Array<Scalars['String']['input']>;
};

export type InviteUserPayload = {
  __typename?: 'InviteUserPayload';
  email: Scalars['String']['output'];
  existing: Scalars['Boolean']['output'];
  firstName?: Maybe<Scalars['String']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  organization: Organization;
  phone?: Maybe<Scalars['String']['output']>;
  roleIds?: Maybe<Array<Scalars['String']['output']>>;
  roles?: Maybe<Array<Role>>;
};

export type InvoiceAsPdfResponse = {
  __typename?: 'InvoiceAsPdfResponse';
  download_url: Scalars['String']['output'];
  mime_type?: Maybe<Scalars['String']['output']>;
  valid_till: Scalars['Float']['output'];
};

export type InvoiceResponse = {
  __typename?: 'InvoiceResponse';
  amount_paid?: Maybe<Scalars['Float']['output']>;
  due_date?: Maybe<Scalars['Float']['output']>;
  id: Scalars['String']['output'];
  status: Scalars['String']['output'];
  total?: Maybe<Scalars['Float']['output']>;
};

export type ItemPriceResponse = {
  __typename?: 'ItemPriceResponse';
  currency_code: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  external_name?: Maybe<Scalars['String']['output']>;
  free_quantity: Scalars['Float']['output'];
  id: Scalars['String']['output'];
  is_taxable?: Maybe<Scalars['Boolean']['output']>;
  item_family_id?: Maybe<Scalars['String']['output']>;
  item_id?: Maybe<Scalars['String']['output']>;
  item_type?: Maybe<Scalars['String']['output']>;
  metadata?: Maybe<Scalars['JSONObject']['output']>;
  name: Scalars['String']['output'];
  object?: Maybe<Scalars['String']['output']>;
  period?: Maybe<Scalars['Float']['output']>;
  period_unit?: Maybe<Scalars['String']['output']>;
  price?: Maybe<Scalars['Float']['output']>;
  pricing_model: Scalars['String']['output'];
  status?: Maybe<Scalars['String']['output']>;
};

export type JsonLocationLog = {
  contactInformation: ContactInformation;
  /** Use 'idScan' key to send data back from IDScan API */
  idScan?: InputMaybe<Scalars['JSON']['input']>;
  /** Use 'logJourney' key to store location log processing steps e.g ['CONTACT_INFORMATION', 'SOR', 'SUCCESS'] */
  logJourney?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Use 'portalProcessing' key to store portal processing data */
  portalProcessing?: InputMaybe<Scalars['JSON']['input']>;
  /** Use 'sor' key to receive data back from BIB's SOR API */
  sor?: InputMaybe<Scalars['JSON']['input']>;
};

export type Location = {
  __typename?: 'Location';
  addresses: Array<Address>;
  createdAt: Scalars['DateTime']['output'];
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  externalId?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isActive: Scalars['Boolean']['output'];
  locationsToWorkflows?: Maybe<Array<Maybe<LocationsToWorkflows>>>;
  name: Scalars['String']['output'];
  subsidiary: Subsidiary;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};


export type LocationAddressesArgs = {
  isArchived?: InputMaybe<Scalars['Boolean']['input']>;
  type: AddressTypeEntity;
};

export type LocationLog = {
  __typename?: 'LocationLog';
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['JSON']['output']>;
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  disputes?: Maybe<Array<Maybe<Dispute>>>;
  expiresAt?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  location?: Maybe<Location>;
  operation: Scalars['String']['output'];
  portraits?: Maybe<Array<Attachment>>;
  status: Location_Log_Status;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  workflow?: Maybe<WorkFlow>;
};


export type LocationLogPortraitsArgs = {
  type: AttachmentType;
};

export type LocationLogChartDataInput = {
  fromDate?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  toDate?: InputMaybe<Scalars['String']['input']>;
};

export type LocationLogFiltersInput = {
  fromDate?: InputMaybe<Scalars['String']['input']>;
  locationId?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Location_Log_Status>;
  toDate?: InputMaybe<Scalars['String']['input']>;
};

export type LocationLogInput = {
  data?: InputMaybe<JsonLocationLog>;
  externalId?: InputMaybe<Scalars['String']['input']>;
  /** Use this to fetch the existing record */
  fetchOnly?: InputMaybe<Scalars['Boolean']['input']>;
  locationId: Scalars['String']['input'];
  organizationId: Scalars['String']['input'];
  sessionId?: InputMaybe<Scalars['String']['input']>;
  subsidiaryId: Scalars['String']['input'];
  taskOperation: OperationTypeEntity;
  taskOperationProcessing?: InputMaybe<TaskOperationProcessing>;
  workflowId: Scalars['String']['input'];
};

export type LocationLogStatusUpdateInput = {
  id: Scalars['String']['input'];
  status: Location_Log_Status;
};

export type LocationLogsFiltersResponse = {
  __typename?: 'LocationLogsFiltersResponse';
  count: Scalars['Float']['output'];
};

export type LocationLogsInput = {
  from?: InputMaybe<Scalars['String']['input']>;
  fromDate?: InputMaybe<Scalars['String']['input']>;
  keyword?: InputMaybe<Scalars['String']['input']>;
  locationId?: InputMaybe<Scalars['String']['input']>;
  monitoring?: InputMaybe<MonitoringPeriod>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  paginationOptions: PaginationInput;
  status?: InputMaybe<Location_Log_Status>;
  timeZone?: InputMaybe<Scalars['String']['input']>;
  to?: InputMaybe<Scalars['String']['input']>;
  toDate?: InputMaybe<Scalars['String']['input']>;
  workflowId?: InputMaybe<Scalars['String']['input']>;
};

export type LocationWorkflowInput = {
  locationId: Scalars['String']['input'];
  tag: Scalars['String']['input'];
  workflowId: Scalars['String']['input'];
};

export type LocationWorkflowTaskInput = {
  locationId: Scalars['String']['input'];
  tag: Scalars['String']['input'];
  taskId: Scalars['String']['input'];
  workflowId: Scalars['String']['input'];
};

export type LocationWorkflowsInput = {
  locationId: Scalars['String']['input'];
  tag: Scalars['String']['input'];
};

export type LocationWorkflowsPayload = {
  __typename?: 'LocationWorkflowsPayload';
  address: Address;
  workflows?: Maybe<Array<Maybe<WorkFlow>>>;
};

export type LocationsInput = {
  from?: InputMaybe<Scalars['String']['input']>;
  isArchived?: InputMaybe<Scalars['Boolean']['input']>;
  keyword?: InputMaybe<Scalars['String']['input']>;
  paginationOptions: PaginationInput;
  subsidiaryId?: InputMaybe<Scalars['String']['input']>;
  to?: InputMaybe<Scalars['String']['input']>;
};

export type LocationsLogsPayload = {
  __typename?: 'LocationsLogsPayload';
  getFilterCounts?: Maybe<LocationLogsFiltersResponse>;
  locationLogs?: Maybe<Array<Maybe<LocationLog>>>;
  pagination?: Maybe<PaginationPayload>;
};


export type LocationsLogsPayloadGetFilterCountsArgs = {
  locationLogFiltersInput: LocationLogFiltersInput;
};

export type LocationsPayload = {
  __typename?: 'LocationsPayload';
  locations?: Maybe<Array<Maybe<Location>>>;
  pagination?: Maybe<PaginationPayload>;
};

export type LocationsToWorkflows = {
  __typename?: 'LocationsToWorkflows';
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  location?: Maybe<Location>;
  locationId: Scalars['String']['output'];
  locationToWorkflowId: Scalars['String']['output'];
  workFlow?: Maybe<WorkFlow>;
  workflowId: Scalars['String']['output'];
};

export type LoginUserInput = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
  slug: Scalars['String']['input'];
};

/** The type of attachment itself */
export enum MetaType {
  Cover = 'COVER',
  Csv = 'CSV',
  Logo = 'LOGO',
  Portrait = 'PORTRAIT',
  Profile = 'PROFILE'
}

export enum MonitoringPeriod {
  Monitored = 'MONITORED',
  NotMonitored = 'NOT_MONITORED'
}

export type Mutation = {
  __typename?: 'Mutation';
  addAddress: Address;
  archiveLocation: Scalars['Boolean']['output'];
  archiveOrganization: Scalars['Boolean']['output'];
  archiveRole: Scalars['Boolean']['output'];
  archiveSubsidiary: Scalars['Boolean']['output'];
  archiveWorkflow: Scalars['Boolean']['output'];
  createBibIdScanSession: IdScanCreateSessionResponse;
  createCustomer: Scalars['Boolean']['output'];
  createDisputePublic: Dispute;
  createLocation: Location;
  createOrganization: Organization;
  createOrganizationConfig: Array<OrganizationConfigs>;
  createPaymentIntent: CreatePaymentIntentResponse;
  createPaymentSource: PaymentSourceResponse;
  createRolePermissions: Scalars['Boolean']['output'];
  createSubscription: SubscriptionResponse;
  createSubsidiary: Subsidiary;
  createWorkflow: Scalars['Boolean']['output'];
  deleteAddress: Scalars['Boolean']['output'];
  deleteOrgAttachment: Scalars['Boolean']['output'];
  deleteOrganization: Scalars['Boolean']['output'];
  deleteUserAttachment: Scalars['Boolean']['output'];
  forceDeleteLocation: Scalars['Boolean']['output'];
  forceDeleteOrganization: Scalars['Boolean']['output'];
  forceDeleteRole: Scalars['Boolean']['output'];
  forceDeleteSubsidiary: Scalars['Boolean']['output'];
  forceDeleteUser: Scalars['Boolean']['output'];
  forceDeleteWorkflow: Scalars['Boolean']['output'];
  forgotPassword: Scalars['Boolean']['output'];
  inviteUser: Scalars['Boolean']['output'];
  login: SignupUserResponse;
  register: Scalars['Boolean']['output'];
  removeUser: Scalars['Boolean']['output'];
  resendOtp: SignupUserResponse;
  restoreArchivedOrg: Scalars['Boolean']['output'];
  restoreLocation: Scalars['Boolean']['output'];
  restoreRole: Scalars['Boolean']['output'];
  restoreSubsidiary: Scalars['Boolean']['output'];
  restoreUser: Scalars['Boolean']['output'];
  restoreWorkflow: Scalars['Boolean']['output'];
  saveLocationLog: LocationLog;
  signUpUser: SignupUserResponse;
  updateAddress: Address;
  updateBoardingStep: OrganizationToUser;
  updateLocation: Scalars['Boolean']['output'];
  updateLocationLogStatus: LocationLog;
  updateOrganization: Scalars['Boolean']['output'];
  updateOrganizationConfig: Array<OrganizationConfigs>;
  updateRoleWithPermissions: Scalars['Boolean']['output'];
  updateSubsidiary: Subsidiary;
  updateUser: User;
  updateUserPassword: User;
  updateUserPasswordForProfile: Scalars['Boolean']['output'];
  updateUserRole: User;
  updateUserStatus: OrganizationToUser;
  updateWorkflow: Scalars['Boolean']['output'];
  verifyInvitationToken: InviteUserPayload;
  verifyOtp: AccessUserPayload;
  verifyResetPasswordToken: Scalars['Boolean']['output'];
  verifyResetPasswordTokenAndSetPassword: Scalars['Boolean']['output'];
};


export type MutationAddAddressArgs = {
  createAddress: CreateAddressInput;
};


export type MutationArchiveLocationArgs = {
  id: Scalars['String']['input'];
  subsidiaryId: Scalars['String']['input'];
};


export type MutationArchiveOrganizationArgs = {
  organizationId: Scalars['String']['input'];
};


export type MutationArchiveRoleArgs = {
  id: Scalars['String']['input'];
};


export type MutationArchiveSubsidiaryArgs = {
  id: Scalars['String']['input'];
};


export type MutationArchiveWorkflowArgs = {
  id: Scalars['String']['input'];
};


export type MutationCreateBibIdScanSessionArgs = {
  bibSession: IdScanCreateSessionInput;
};


export type MutationCreateCustomerArgs = {
  input: CreateCustomerInput;
};


export type MutationCreateDisputePublicArgs = {
  createDisputeInput: CreateDisputeInput;
};


export type MutationCreateLocationArgs = {
  createLocationInput: CreateLocationInput;
};


export type MutationCreateOrganizationArgs = {
  createOrganizationInput: CreateOrganizationInput;
};


export type MutationCreateOrganizationConfigArgs = {
  createOrganizationConfigInput: CreateOrganizationConfigInput;
};


export type MutationCreatePaymentIntentArgs = {
  input: CreatePaymentIntentInput;
};


export type MutationCreatePaymentSourceArgs = {
  input: CreatePaymentSourceInput;
};


export type MutationCreateRolePermissionsArgs = {
  createPermissionInput: Array<CreatePermissionInput>;
  createRoleInput: CreateRoleInput;
  organizationId: Scalars['String']['input'];
};


export type MutationCreateSubscriptionArgs = {
  input: CreateSubscriptionInput;
};


export type MutationCreateSubsidiaryArgs = {
  createSubsidiaryInput: CreateSubsidiaryInput;
};


export type MutationCreateWorkflowArgs = {
  createWorkflowInput: CreateWorkflowInput;
};


export type MutationDeleteAddressArgs = {
  deleteAddress: DeleteAddressInput;
};


export type MutationDeleteOrgAttachmentArgs = {
  id: Scalars['String']['input'];
};


export type MutationDeleteOrganizationArgs = {
  organizationId: Scalars['String']['input'];
};


export type MutationDeleteUserAttachmentArgs = {
  id: Scalars['String']['input'];
};


export type MutationForceDeleteLocationArgs = {
  id: Scalars['String']['input'];
};


export type MutationForceDeleteOrganizationArgs = {
  organizationId: Scalars['String']['input'];
};


export type MutationForceDeleteRoleArgs = {
  id: Scalars['String']['input'];
};


export type MutationForceDeleteSubsidiaryArgs = {
  id: Scalars['String']['input'];
};


export type MutationForceDeleteUserArgs = {
  id: Scalars['String']['input'];
  organizationId: Scalars['String']['input'];
};


export type MutationForceDeleteWorkflowArgs = {
  id: Scalars['String']['input'];
};


export type MutationForgotPasswordArgs = {
  forgotPasswordInput: ForgotPasswordInput;
};


export type MutationInviteUserArgs = {
  inviteUserInput: InviteUserInput;
};


export type MutationLoginArgs = {
  loginUser: LoginUserInput;
};


export type MutationRegisterArgs = {
  registerUserInput: RegisterUserInput;
};


export type MutationRemoveUserArgs = {
  id: Scalars['String']['input'];
  organizationId: Scalars['String']['input'];
};


export type MutationResendOtpArgs = {
  email: Scalars['String']['input'];
  slug: Scalars['String']['input'];
};


export type MutationRestoreArchivedOrgArgs = {
  organizationId: Scalars['String']['input'];
};


export type MutationRestoreLocationArgs = {
  id: Scalars['String']['input'];
  subsidiaryId: Scalars['String']['input'];
};


export type MutationRestoreRoleArgs = {
  id: Scalars['String']['input'];
};


export type MutationRestoreSubsidiaryArgs = {
  id: Scalars['String']['input'];
};


export type MutationRestoreUserArgs = {
  id: Scalars['String']['input'];
  organizationId: Scalars['String']['input'];
};


export type MutationRestoreWorkflowArgs = {
  id: Scalars['String']['input'];
};


export type MutationSaveLocationLogArgs = {
  locationLogInput: LocationLogInput;
};


export type MutationSignUpUserArgs = {
  signUpUserInput: SignUpUserInput;
};


export type MutationUpdateAddressArgs = {
  updateAddress: UpdateAddressInput;
};


export type MutationUpdateBoardingStepArgs = {
  updateUserBoardingStepInput: UpdateUserBoardingStepInput;
};


export type MutationUpdateLocationArgs = {
  updateLocationInput: UpdateLocationInput;
};


export type MutationUpdateLocationLogStatusArgs = {
  locationLogStatusUpdateInput: LocationLogStatusUpdateInput;
};


export type MutationUpdateOrganizationArgs = {
  updateOrganizationInput: UpdateOrganizationInput;
};


export type MutationUpdateOrganizationConfigArgs = {
  updateOrganizationConfigInput: UpdateOrganizationConfigInput;
};


export type MutationUpdateRoleWithPermissionsArgs = {
  updateRoleAndPermissionInput: UpdateRoleAndPermissionInput;
};


export type MutationUpdateSubsidiaryArgs = {
  id: Scalars['String']['input'];
  updateSubsidiaryInput: UpdateSubsidiaryInput;
};


export type MutationUpdateUserArgs = {
  updateUserInput: UpdateUserInput;
};


export type MutationUpdateUserPasswordArgs = {
  updateUserPasswordInput: UpdateUserPasswordInput;
};


export type MutationUpdateUserPasswordForProfileArgs = {
  updatePasswordInputForProfile: UpdatePasswordInputForProfile;
};


export type MutationUpdateUserRoleArgs = {
  updateUserRole: UpdateUserRoleInput;
};


export type MutationUpdateUserStatusArgs = {
  organizationId: Scalars['String']['input'];
  status: Scalars['Float']['input'];
  userId: Scalars['String']['input'];
};


export type MutationUpdateWorkflowArgs = {
  updateWorkflowInput: UpdateWorkflowInput;
};


export type MutationVerifyInvitationTokenArgs = {
  verifyEmailInput: VerifyEmailInput;
};


export type MutationVerifyOtpArgs = {
  verifySignupUserInput: VerifySignupUserInput;
};


export type MutationVerifyResetPasswordTokenArgs = {
  token: Scalars['String']['input'];
};


export type MutationVerifyResetPasswordTokenAndSetPasswordArgs = {
  resetPasswordInput: ResetPasswordInput;
};

export type NormalizedValue = {
  __typename?: 'NormalizedValue';
  Value: Scalars['DateTime']['output'];
  ValueType: Scalars['String']['output'];
};

/** The type of entity associated with the task */
export enum OperationTypeEntity {
  CheckSor = 'CHECK_SOR',
  ContactInformation = 'CONTACT_INFORMATION',
  Dispute = 'DISPUTE',
  Fail = 'FAIL',
  IdentityVerification = 'IDENTITY_VERIFICATION',
  Pause = 'PAUSE',
  Success = 'SUCCESS',
  UploadSelfie = 'UPLOAD_SELFIE'
}

export type Organization = {
  __typename?: 'Organization';
  addresses: Array<Address>;
  attachment?: Maybe<Attachment>;
  createdAt: Scalars['DateTime']['output'];
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  organizationConfigs?: Maybe<Array<OrganizationConfigs>>;
  organizationToUsers?: Maybe<Array<Maybe<OrganizationToUser>>>;
  planId?: Maybe<Scalars['String']['output']>;
  roles?: Maybe<Array<Maybe<Role>>>;
  slug: Scalars['String']['output'];
  subsidiaries?: Maybe<Array<Subsidiary>>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  workflows?: Maybe<Array<WorkFlow>>;
};


export type OrganizationAddressesArgs = {
  isArchived?: InputMaybe<Scalars['Boolean']['input']>;
  type: AddressTypeEntity;
};


export type OrganizationAttachmentArgs = {
  organizationAttachmentDto: OrganizationAttachmentDto;
};

export type OrganizationAttachmentDto = {
  metaType: Scalars['String']['input'];
  type: Scalars['String']['input'];
};

export type OrganizationConfigs = {
  __typename?: 'OrganizationConfigs';
  createdAt: Scalars['DateTime']['output'];
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  moduleType: Module_Type;
  organization: Organization;
  status: Location_Log_Status;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type OrganizationInput = {
  from?: InputMaybe<Scalars['String']['input']>;
  isArchived?: InputMaybe<Scalars['Boolean']['input']>;
  keyword?: InputMaybe<Scalars['String']['input']>;
  paginationOptions: PaginationInput;
  to?: InputMaybe<Scalars['String']['input']>;
};

export type OrganizationPayload = {
  __typename?: 'OrganizationPayload';
  organizations?: Maybe<Array<Maybe<Organization>>>;
  pagination?: Maybe<PaginationPayload>;
};

export type OrganizationPublic = {
  __typename?: 'OrganizationPublic';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  publicAttachment?: Maybe<Attachment>;
  slug: Scalars['String']['output'];
};


export type OrganizationPublicPublicAttachmentArgs = {
  organizationAttachmentDto: OrganizationAttachmentDto;
};

export type OrganizationToUser = {
  __typename?: 'OrganizationToUser';
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  onBoardingStep?: Maybe<Scalars['Float']['output']>;
  organization?: Maybe<Organization>;
  organizationId: Scalars['String']['output'];
  postOnboarding: Scalars['Boolean']['output'];
  preOnboarding: Scalars['Boolean']['output'];
  status: Status;
  user: User;
  userId: Scalars['String']['output'];
};

export type Output = {
  __typename?: 'Output';
  data_source: Scalars['String']['output'];
  extracted_data?: Maybe<ExtractedData>;
  truncated: Scalars['Boolean']['output'];
};

export type PaginationInput = {
  limit: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  sortOrder?: InputMaybe<SortOrder>;
};

export type PaginationPayload = {
  __typename?: 'PaginationPayload';
  limit?: Maybe<Scalars['Int']['output']>;
  page?: Maybe<Scalars['Int']['output']>;
  totalCount?: Maybe<Scalars['Int']['output']>;
  totalPages?: Maybe<Scalars['Int']['output']>;
};

export type PaymentIntentResponse = {
  __typename?: 'PaymentIntentResponse';
  amount: Scalars['Float']['output'];
  created_at: Scalars['Float']['output'];
  currency_code?: Maybe<Scalars['String']['output']>;
  customer_id: Scalars['String']['output'];
  expires_at: Scalars['Float']['output'];
  failure_url?: Maybe<Scalars['String']['output']>;
  gateway?: Maybe<Scalars['String']['output']>;
  gateway_account_id: Scalars['String']['output'];
  id: Scalars['String']['output'];
  modified_at: Scalars['Float']['output'];
  object?: Maybe<Scalars['String']['output']>;
  payment_method_type?: Maybe<Scalars['String']['output']>;
  resource_version?: Maybe<Scalars['Float']['output']>;
  status: Scalars['String']['output'];
  success_url?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['Float']['output']>;
};

export type PaymentSourceListResponse = {
  __typename?: 'PaymentSourceListResponse';
  next_offset?: Maybe<Scalars['String']['output']>;
  paymentSources: Array<PaymentSourceResponse>;
};

export type PaymentSourceResponse = {
  __typename?: 'PaymentSourceResponse';
  card: CardResponse;
  created_at: Scalars['Float']['output'];
  id: Scalars['String']['output'];
};

export type Permission = {
  __typename?: 'Permission';
  canCreate: Scalars['Boolean']['output'];
  canDelete: Scalars['Boolean']['output'];
  canUpdate: Scalars['Boolean']['output'];
  canView: Scalars['Boolean']['output'];
  createdAt: Scalars['DateTime']['output'];
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  granularControls?: Maybe<Array<Maybe<GranularControls>>>;
  id: Scalars['ID']['output'];
  moduleName: PermissionModuleEnumEntity;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export enum PermissionModuleEnumEntity {
  Locations = 'LOCATIONS',
  Organizations = 'ORGANIZATIONS',
  Roles = 'ROLES',
  Subsidiaries = 'SUBSIDIARIES',
  Users = 'USERS',
  Workflows = 'WORKFLOWS'
}

export type PermissionWithGranularControlsResponse = {
  __typename?: 'PermissionWithGranularControlsResponse';
  canCreate: Scalars['Boolean']['output'];
  canDelete: Scalars['Boolean']['output'];
  canUpdate: Scalars['Boolean']['output'];
  canView: Scalars['Boolean']['output'];
  createdAt: Scalars['DateTime']['output'];
  granularControls: Array<BaseGranularControlsResponse>;
  id: Scalars['ID']['output'];
  moduleName: PermissionModuleEnumEntity;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type Query = {
  __typename?: 'Query';
  getAllLocationLogs: LocationsLogsPayload;
  getAllLocations: LocationsPayload;
  getAllLocationsForFilters: Array<FilterLocationsPayload>;
  getAllOrganization: OrganizationPayload;
  getAllOrganizationRoles: RolesPayload;
  getAllSubsidiaries: SubsidiariesPayload;
  getAllSubsidiariesList: Array<Subsidiary>;
  getAllUsers: UsersPayload;
  getAllWorkflows: WorkFlowsPayload;
  getBibIdScanSession: IdScanSessionPayload;
  getChartData: Array<ChartDataPayload>;
  getConfigByOrgId: Array<OrganizationConfigs>;
  getCoupon: CouponResponse;
  getCustomer: CustomerResponse;
  getCustomerCurrentSubscription: SubscriptionResponse;
  getCustomerInvoices: Array<InvoiceResponse>;
  getCustomerPaymentSources: PaymentSourceListResponse;
  getCustomerSubscriptions: Array<SubscriptionResponse>;
  getInvoice: InvoiceResponse;
  getInvoiceAsPdf: InvoiceAsPdfResponse;
  getLocation: Location;
  getLocationLog: LocationLog;
  getLocationWorkflows: LocationWorkflowsPayload;
  getLocationsByWorkflow: GetLocationsByWorkflowPayload;
  getOrgPublic: OrganizationPublic;
  getOrganization: Organization;
  getOrganizationRoles: Array<Role>;
  getOrganizationSubsidiaries: Array<Subsidiary>;
  getRoleById: GetRoleByIdResponse;
  getSubscriptionDetailsForSubsidiary: SubscriptionDetailsForSubsidiaryResponse;
  getSubscriptionPlans: Array<SubscriptionPlansResponse>;
  getSubsidiary: Subsidiary;
  getTasks: Array<Task>;
  getUserById: User;
  getWidgetCounts: GetCountsPayload;
  getWorkFlowDescendants: WorkflowsToTasks;
  getWorkflow: WorkFlow;
  getWorkflowById: WorkFlow;
  getWorkflowTask: WorkflowsToTasks;
  getWorkflowTemplates: Array<WorkflowTemplate>;
  getWorkflows: Array<WorkFlow>;
  me: User;
  search: SearchResultPayload;
  slugLookup: SlugSuggestionsPayload;
  sorStatusCheck: BibsorPayload;
};


export type QueryGetAllLocationLogsArgs = {
  locationLogsInput: LocationLogsInput;
};


export type QueryGetAllLocationsArgs = {
  locationsInput: LocationsInput;
};


export type QueryGetAllLocationsForFiltersArgs = {
  subsidiaryId?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetAllOrganizationArgs = {
  organizationInput: OrganizationInput;
};


export type QueryGetAllOrganizationRolesArgs = {
  roleInput: RoleInput;
};


export type QueryGetAllSubsidiariesArgs = {
  subsidiaryInput: SubsidiaryInput;
};


export type QueryGetAllSubsidiariesListArgs = {
  organizationId: Scalars['String']['input'];
};


export type QueryGetAllUsersArgs = {
  userInput: UserInput;
};


export type QueryGetAllWorkflowsArgs = {
  getAllWorkflowsInput: GetAllWorkflowsInput;
};


export type QueryGetBibIdScanSessionArgs = {
  bibSession: Scalars['String']['input'];
};


export type QueryGetChartDataArgs = {
  locationLogChartDataInput: LocationLogChartDataInput;
};


export type QueryGetConfigByOrgIdArgs = {
  organizationId: Scalars['String']['input'];
};


export type QueryGetCouponArgs = {
  input: GetCouponInput;
};


export type QueryGetCustomerArgs = {
  subsidiaryId: Scalars['String']['input'];
};


export type QueryGetCustomerCurrentSubscriptionArgs = {
  subsidiaryId: Scalars['String']['input'];
};


export type QueryGetCustomerInvoicesArgs = {
  subsidiaryId: Scalars['String']['input'];
};


export type QueryGetCustomerPaymentSourcesArgs = {
  input: GetCustomerPaymentSourcesInput;
};


export type QueryGetCustomerSubscriptionsArgs = {
  subsidiaryId: Scalars['String']['input'];
};


export type QueryGetInvoiceArgs = {
  invoiceId: Scalars['String']['input'];
};


export type QueryGetInvoiceAsPdfArgs = {
  invoiceId: Scalars['String']['input'];
};


export type QueryGetLocationArgs = {
  id: Scalars['String']['input'];
};


export type QueryGetLocationLogArgs = {
  locationLogId: Scalars['String']['input'];
};


export type QueryGetLocationWorkflowsArgs = {
  locationWorkflowsInput: LocationWorkflowsInput;
};


export type QueryGetLocationsByWorkflowArgs = {
  workflowId: Scalars['String']['input'];
};


export type QueryGetOrgPublicArgs = {
  slug: Scalars['String']['input'];
};


export type QueryGetOrganizationArgs = {
  organizationId: Scalars['String']['input'];
};


export type QueryGetOrganizationRolesArgs = {
  organizationId?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetOrganizationSubsidiariesArgs = {
  organizationId: Scalars['String']['input'];
};


export type QueryGetRoleByIdArgs = {
  input: GetRoleByIdInput;
};


export type QueryGetSubscriptionDetailsForSubsidiaryArgs = {
  subsidiaryId: Scalars['String']['input'];
};


export type QueryGetSubscriptionPlansArgs = {
  input: GetSubscriptionPlansInput;
};


export type QueryGetSubsidiaryArgs = {
  id: Scalars['String']['input'];
};


export type QueryGetUserByIdArgs = {
  input: GetUserByIdInput;
};


export type QueryGetWidgetCountsArgs = {
  getWidgetCountInput: GetWidgetCountInput;
};


export type QueryGetWorkFlowDescendantsArgs = {
  id: Scalars['String']['input'];
};


export type QueryGetWorkflowArgs = {
  locationWorkflowInput: LocationWorkflowInput;
};


export type QueryGetWorkflowByIdArgs = {
  id: Scalars['String']['input'];
};


export type QueryGetWorkflowTaskArgs = {
  locationWorkflowTaskInput: LocationWorkflowTaskInput;
};


export type QueryGetWorkflowsArgs = {
  organizationId?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMeArgs = {
  slug: Scalars['String']['input'];
};


export type QuerySearchArgs = {
  searchInput: SearchInput;
};


export type QuerySlugLookupArgs = {
  slugSuggestionsInput: SlugSuggestionsInput;
};


export type QuerySorStatusCheckArgs = {
  sorStatusCheck: SorStatusCheckInput;
};

export type RawData = {
  __typename?: 'RawData';
  AnalyzeIDModelVersion: Scalars['String']['output'];
  DocumentMetadata?: Maybe<DocumentMetadata>;
  IdentityDocuments?: Maybe<Array<Maybe<IdentityDocument>>>;
};

export type RegisterUserInput = {
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
  password?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  token: Scalars['String']['input'];
};

export type ResetPasswordInput = {
  password: Scalars['String']['input'];
  token: Scalars['String']['input'];
};

export type Role = {
  __typename?: 'Role';
  createdAt: Scalars['DateTime']['output'];
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  organizationId: Scalars['String']['output'];
  permissions?: Maybe<Array<Maybe<Permission>>>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type RoleInput = {
  from?: InputMaybe<Scalars['String']['input']>;
  isArchived?: InputMaybe<Scalars['Boolean']['input']>;
  keyword?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  paginationOptions: PaginationInput;
  to?: InputMaybe<Scalars['String']['input']>;
};

export type RolesPayload = {
  __typename?: 'RolesPayload';
  pagination?: Maybe<PaginationPayload>;
  roles?: Maybe<Array<Maybe<Role>>>;
};

export type SorStatusCheckInput = {
  /** Individual entity's unique ID generated for BIB (Internally that's the locationLog's ID). For example: 68FECCD3-4FDD-4A1C-BE32-32727FA8C834 */
  personId: Scalars['String']['input'];
};

export type SearchInput = {
  archived?: InputMaybe<Scalars['Boolean']['input']>;
  paginationOptions: PaginationInput;
  query: Scalars['String']['input'];
};

export type SearchResultItem = {
  __typename?: 'SearchResultItem';
  _index: Scalars['String']['output'];
  _source: Scalars['JSONObject']['output'];
};

export type SearchResultPayload = {
  __typename?: 'SearchResultPayload';
  pagination?: Maybe<PaginationPayload>;
  results: Array<SearchResultItem>;
};

export type SignUpUserInput = {
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
  password: Scalars['String']['input'];
  planId?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type SignupUserResponse = {
  __typename?: 'SignupUserResponse';
  message: Scalars['String']['output'];
  status: Scalars['String']['output'];
};

export type SlugSuggestionsInput = {
  name: Scalars['String']['input'];
  slug: Scalars['String']['input'];
};

export type SlugSuggestionsPayload = {
  __typename?: 'SlugSuggestionsPayload';
  message?: Maybe<Scalars['String']['output']>;
  suggestions: Array<Maybe<Scalars['String']['output']>>;
};

export enum SortOrder {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type SubscriptionCouponResponse = {
  __typename?: 'SubscriptionCouponResponse';
  applied_count: Scalars['Float']['output'];
  apply_till?: Maybe<Scalars['Float']['output']>;
  coupon_code?: Maybe<Scalars['String']['output']>;
  coupon_id: Scalars['String']['output'];
};

export type SubscriptionDetailsForSubsidiaryResponse = {
  __typename?: 'SubscriptionDetailsForSubsidiaryResponse';
  organization: OrganizationPublic;
  subscriptionId: Scalars['String']['output'];
  subscriptionStatus: Scalars['String']['output'];
};

export type SubscriptionItemResponse = {
  __typename?: 'SubscriptionItemResponse';
  amount?: Maybe<Scalars['Float']['output']>;
  billing_cycles?: Maybe<Scalars['Float']['output']>;
  free_quantity?: Maybe<Scalars['Float']['output']>;
  item_price_id: Scalars['String']['output'];
  item_type: Scalars['String']['output'];
  quantity?: Maybe<Scalars['Float']['output']>;
  unit_price?: Maybe<Scalars['Float']['output']>;
};

export type SubscriptionPaginationInput = {
  limit: Scalars['Int']['input'];
  offset?: InputMaybe<Scalars['String']['input']>;
};

export type SubscriptionPlansResponse = {
  __typename?: 'SubscriptionPlansResponse';
  description?: Maybe<Scalars['String']['output']>;
  external_name?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  item_family_id?: Maybe<Scalars['String']['output']>;
  metadata?: Maybe<Scalars['JSONObject']['output']>;
  metered: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  object?: Maybe<Scalars['String']['output']>;
  prices: Array<ItemPriceResponse>;
  status?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
  unit?: Maybe<Scalars['String']['output']>;
  usage_calculation?: Maybe<Scalars['String']['output']>;
};

export type SubscriptionResponse = {
  __typename?: 'SubscriptionResponse';
  activated_at?: Maybe<Scalars['Float']['output']>;
  billing_period?: Maybe<Scalars['Float']['output']>;
  billing_period_unit?: Maybe<Scalars['String']['output']>;
  coupons?: Maybe<Array<SubscriptionCouponResponse>>;
  created_at?: Maybe<Scalars['Float']['output']>;
  customer_id: Scalars['String']['output'];
  due_invoices_count?: Maybe<Scalars['Float']['output']>;
  due_since?: Maybe<Scalars['Float']['output']>;
  id: Scalars['String']['output'];
  next_billing_at?: Maybe<Scalars['Float']['output']>;
  object?: Maybe<Scalars['String']['output']>;
  started_at?: Maybe<Scalars['Float']['output']>;
  status: Scalars['String']['output'];
  subscription_items?: Maybe<Array<SubscriptionItemResponse>>;
  updated_at?: Maybe<Scalars['Float']['output']>;
};

export type SubsidiariesPayload = {
  __typename?: 'SubsidiariesPayload';
  pagination?: Maybe<PaginationPayload>;
  subsidiaries?: Maybe<Array<Maybe<Subsidiary>>>;
};

export type Subsidiary = {
  __typename?: 'Subsidiary';
  addresses: Array<Address>;
  contact?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  customerId?: Maybe<Scalars['String']['output']>;
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  ein?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  locations: Array<Location>;
  name: Scalars['String']['output'];
  organization: Organization;
  priceId?: Maybe<Scalars['String']['output']>;
  subscriptionId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};


export type SubsidiaryAddressesArgs = {
  isArchived?: InputMaybe<Scalars['Boolean']['input']>;
  type: AddressTypeEntity;
};

export type SubsidiaryInput = {
  from?: InputMaybe<Scalars['String']['input']>;
  isArchived?: InputMaybe<Scalars['Boolean']['input']>;
  keyword?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  paginationOptions: PaginationInput;
  to?: InputMaybe<Scalars['String']['input']>;
};

export type Task = {
  __typename?: 'Task';
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['JSON']['output']>;
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  operation: Scalars['String']['output'];
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  workflowsToTasks?: Maybe<Array<WorkflowsToTasks>>;
};

export type TaskOperationProcessing = {
  label: Scalars['String']['input'];
  value: Scalars['String']['input'];
};

export type Type = {
  __typename?: 'Type';
  Text?: Maybe<Scalars['String']['output']>;
};

export type UpdateAddressInput = {
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
  phone?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  streetAddress1?: InputMaybe<Scalars['String']['input']>;
  streetAddress2?: InputMaybe<Scalars['String']['input']>;
  tag?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<AddressTypeEntity>;
  /** Type ID only to be sent while creating a new address using createAddress mutation */
  typeId?: InputMaybe<Scalars['String']['input']>;
  zipCode?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateLocationInput = {
  boarding?: InputMaybe<Scalars['Boolean']['input']>;
  externalId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  workflowIds?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type UpdateOrganizationConfigInput = {
  moduleType: Module_Type;
  organizationId: Scalars['String']['input'];
  status: Array<Location_Log_Status>;
};

export type UpdateOrganizationInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  organizationId: Scalars['String']['input'];
  planId?: InputMaybe<Scalars['String']['input']>;
};

export type UpdatePasswordInputForProfile = {
  id: Scalars['String']['input'];
  newPassword: Scalars['String']['input'];
  oldPassword: Scalars['String']['input'];
};

export type UpdatePermissionInput = {
  canCreate: Scalars['Boolean']['input'];
  canDelete: Scalars['Boolean']['input'];
  canUpdate: Scalars['Boolean']['input'];
  canView: Scalars['Boolean']['input'];
  entityIds?: InputMaybe<Array<Scalars['String']['input']>>;
  moduleName: PermissionModuleEnumEntity;
};

export type UpdateRoleAndPermissionInput = {
  roleId: Scalars['String']['input'];
  updatePermissionInput: Array<UpdatePermissionInput>;
  updateRoleInput: UpdateRoleInput;
};

export type UpdateRoleInput = {
  description: Scalars['String']['input'];
  name: Scalars['String']['input'];
};

export type UpdateSubsidiaryInput = {
  contact?: InputMaybe<Scalars['String']['input']>;
  ein?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  priceId?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateTaskInput = {
  data?: InputMaybe<Scalars['JSON']['input']>;
  failureId?: InputMaybe<Scalars['String']['input']>;
  intermediateId?: InputMaybe<Scalars['String']['input']>;
  successId?: InputMaybe<Scalars['String']['input']>;
  taskId: Scalars['String']['input'];
};

export type UpdateUserBoardingStepInput = {
  onBoardingStep?: InputMaybe<Scalars['Float']['input']>;
  organizationId: Scalars['String']['input'];
  postOnboarding?: InputMaybe<Scalars['Boolean']['input']>;
  preOnboarding?: InputMaybe<Scalars['Boolean']['input']>;
  userId: Scalars['String']['input'];
};

export type UpdateUserInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  organizationId: Scalars['String']['input'];
  phone?: InputMaybe<Scalars['String']['input']>;
  roleIds?: InputMaybe<Array<Scalars['String']['input']>>;
  token?: InputMaybe<Scalars['String']['input']>;
  userId?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateUserPasswordInput = {
  newPassword: Scalars['String']['input'];
  oldPassword: Scalars['String']['input'];
  userId: Scalars['String']['input'];
};

export type UpdateUserRoleInput = {
  roleType: Scalars['String']['input'];
  userId: Scalars['String']['input'];
};

export type UpdateWorkflowInput = {
  description: Scalars['String']['input'];
  id: Scalars['String']['input'];
  name: Scalars['String']['input'];
  tasks: Array<UpdateTaskInput>;
};

export type User = {
  __typename?: 'User';
  createdAt: Scalars['DateTime']['output'];
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  email: Scalars['String']['output'];
  emailVerified: Scalars['Boolean']['output'];
  firstName?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  lastName?: Maybe<Scalars['String']['output']>;
  organizationToUsers: Array<OrganizationToUser>;
  phone?: Maybe<Scalars['String']['output']>;
  profile?: Maybe<Attachment>;
  roles?: Maybe<Array<Maybe<Role>>>;
  status: Status;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};


export type UserProfileArgs = {
  type: AttachmentType;
};

export type UserInput = {
  from?: InputMaybe<Scalars['String']['input']>;
  isArchived?: InputMaybe<Scalars['Boolean']['input']>;
  keyword?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  paginationOptions: PaginationInput;
  status?: InputMaybe<Status>;
  to?: InputMaybe<Scalars['String']['input']>;
};

export type UsersPayload = {
  __typename?: 'UsersPayload';
  pagination?: Maybe<PaginationPayload>;
  users?: Maybe<Array<Maybe<User>>>;
};

export type ValueDetection = {
  __typename?: 'ValueDetection';
  Confidence?: Maybe<Scalars['Float']['output']>;
  NormalizedValue?: Maybe<NormalizedValue>;
  Text?: Maybe<Scalars['String']['output']>;
};

export type VerifyEmailInput = {
  token: Scalars['String']['input'];
};

export type VerifySignupUserInput = {
  email: Scalars['String']['input'];
  otp: Scalars['String']['input'];
  slug: Scalars['String']['input'];
};

export type WorkFlow = {
  __typename?: 'WorkFlow';
  createdAt: Scalars['DateTime']['output'];
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  locationsToWorkflows?: Maybe<Array<LocationsToWorkflows>>;
  name: Scalars['String']['output'];
  organization: Organization;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  workflowType: WorkflowTypeEntity;
  workflowsToTasks?: Maybe<Array<WorkflowsToTasks>>;
};

export type WorkFlowsPayload = {
  __typename?: 'WorkFlowsPayload';
  pagination?: Maybe<PaginationPayload>;
  workflows?: Maybe<Array<Maybe<WorkFlow>>>;
};

export type WorkflowTemplate = {
  __typename?: 'WorkflowTemplate';
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['JSON']['output']>;
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

/** The type of entity associated with the workflows */
export enum WorkflowTypeEntity {
  Guest = 'GUEST',
  Member = 'MEMBER'
}

export type WorkflowsToTasks = {
  __typename?: 'WorkflowsToTasks';
  children?: Maybe<Array<WorkflowsToTasks>>;
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['JSON']['output']>;
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  edge?: Maybe<Workflows_To_Tasks_Effect>;
  id: Scalars['ID']['output'];
  parent?: Maybe<WorkflowsToTasks>;
  task?: Maybe<Task>;
  taskId: Scalars['String']['output'];
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  workFlow?: Maybe<WorkFlow>;
  workflowId: Scalars['String']['output'];
};

/** location log status */
export enum Location_Log_Status {
  Approved = 'APPROVED',
  Denied = 'DENIED',
  Disputed = 'DISPUTED',
  InProgress = 'IN_PROGRESS',
  Paused = 'PAUSED',
  Revoked = 'REVOKED'
}

/** Module type enum */
export enum Module_Type {
  Attachment = 'ATTACHMENT',
  Dashboard = 'DASHBOARD',
  Location = 'LOCATION',
  LocationLog = 'LOCATION_LOG',
  Organization = 'ORGANIZATION',
  Subsidiary = 'SUBSIDIARY',
  User = 'USER'
}

/** The status active/inactive */
export enum Status {
  Active = 'ACTIVE',
  Deactivated = 'DEACTIVATED'
}

/** The workflows Effect */
export enum Workflows_To_Tasks_Effect {
  /** The FAIL Node - This will be the end of the pathway */
  Fail = 'FAIL',
  /** PAUSE Node */
  Pause = 'PAUSE',
  /** Restart Node - Move to the immediate ancestor and invoke the task again */
  Restart = 'RESTART',
  /** The Root Node */
  Root = 'ROOT',
  /** Success Node - The next Node after performing successful operations */
  Success = 'SUCCESS'
}

export type CreateCustomerMutationVariables = Exact<{
  input: CreateCustomerInput;
}>;


export type CreateCustomerMutation = { __typename?: 'Mutation', createCustomer: boolean };

export type CreatePaymentIntentMutationVariables = Exact<{
  input: CreatePaymentIntentInput;
}>;


export type CreatePaymentIntentMutation = { __typename?: 'Mutation', createPaymentIntent: { __typename?: 'CreatePaymentIntentResponse', paymentIntent: { __typename?: 'PaymentIntentResponse', id: string, status: string, currency_code?: string | null, amount: number, gateway_account_id: string, expires_at: number, payment_method_type?: string | null, success_url?: string | null, failure_url?: string | null, created_at: number, modified_at: number, resource_version?: number | null, updated_at?: number | null, customer_id: string, gateway?: string | null, object?: string | null }, price: { __typename?: 'ItemPriceResponse', id: string, name: string, description?: string | null, currency_code: string, pricing_model: string, free_quantity: number, item_family_id?: string | null, item_id?: string | null, status?: string | null, external_name?: string | null, price?: number | null, period?: number | null, period_unit?: string | null, is_taxable?: boolean | null, item_type?: string | null, metadata?: any | null, object?: string | null } } };

export type CreateSubscriptionMutationVariables = Exact<{
  input: CreateSubscriptionInput;
}>;


export type CreateSubscriptionMutation = { __typename?: 'Mutation', subscription: { __typename?: 'SubscriptionResponse', id: string, status: string } };

export type GetSubscriptionPlansQueryVariables = Exact<{
  input: GetSubscriptionPlansInput;
}>;


export type GetSubscriptionPlansQuery = { __typename?: 'Query', plans: Array<{ __typename?: 'SubscriptionPlansResponse', id: string, name: string, external_name?: string | null, description?: string | null, status?: string | null, item_family_id?: string | null, type: string, unit?: string | null, metered: boolean, usage_calculation?: string | null, metadata?: any | null, object?: string | null, prices: Array<{ __typename?: 'ItemPriceResponse', id: string, name: string, currency_code: string, pricing_model: string, free_quantity: number, item_family_id?: string | null, item_id?: string | null, status?: string | null, external_name?: string | null, price?: number | null, period?: number | null, period_unit?: string | null, is_taxable?: boolean | null, item_type?: string | null, object?: string | null, metadata?: any | null, description?: string | null }> }> };


export const CreateCustomerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateCustomer"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateCustomerInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createCustomer"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}]}]}}]} as unknown as DocumentNode<CreateCustomerMutation, CreateCustomerMutationVariables>;
export const CreatePaymentIntentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreatePaymentIntent"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreatePaymentIntentInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createPaymentIntent"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"paymentIntent"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"currency_code"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"gateway_account_id"}},{"kind":"Field","name":{"kind":"Name","value":"expires_at"}},{"kind":"Field","name":{"kind":"Name","value":"payment_method_type"}},{"kind":"Field","name":{"kind":"Name","value":"success_url"}},{"kind":"Field","name":{"kind":"Name","value":"failure_url"}},{"kind":"Field","name":{"kind":"Name","value":"created_at"}},{"kind":"Field","name":{"kind":"Name","value":"modified_at"}},{"kind":"Field","name":{"kind":"Name","value":"resource_version"}},{"kind":"Field","name":{"kind":"Name","value":"updated_at"}},{"kind":"Field","name":{"kind":"Name","value":"customer_id"}},{"kind":"Field","name":{"kind":"Name","value":"gateway"}},{"kind":"Field","name":{"kind":"Name","value":"object"}}]}},{"kind":"Field","name":{"kind":"Name","value":"price"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"currency_code"}},{"kind":"Field","name":{"kind":"Name","value":"pricing_model"}},{"kind":"Field","name":{"kind":"Name","value":"free_quantity"}},{"kind":"Field","name":{"kind":"Name","value":"item_family_id"}},{"kind":"Field","name":{"kind":"Name","value":"item_id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"external_name"}},{"kind":"Field","name":{"kind":"Name","value":"price"}},{"kind":"Field","name":{"kind":"Name","value":"period"}},{"kind":"Field","name":{"kind":"Name","value":"period_unit"}},{"kind":"Field","name":{"kind":"Name","value":"is_taxable"}},{"kind":"Field","name":{"kind":"Name","value":"item_type"}},{"kind":"Field","name":{"kind":"Name","value":"metadata"}},{"kind":"Field","name":{"kind":"Name","value":"object"}}]}}]}}]}}]} as unknown as DocumentNode<CreatePaymentIntentMutation, CreatePaymentIntentMutationVariables>;
export const CreateSubscriptionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateSubscription"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateSubscriptionInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"subscription"},"name":{"kind":"Name","value":"createSubscription"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]} as unknown as DocumentNode<CreateSubscriptionMutation, CreateSubscriptionMutationVariables>;
export const GetSubscriptionPlansDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetSubscriptionPlans"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"GetSubscriptionPlansInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"plans"},"name":{"kind":"Name","value":"getSubscriptionPlans"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"external_name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"item_family_id"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"unit"}},{"kind":"Field","name":{"kind":"Name","value":"metered"}},{"kind":"Field","name":{"kind":"Name","value":"usage_calculation"}},{"kind":"Field","name":{"kind":"Name","value":"metadata"}},{"kind":"Field","name":{"kind":"Name","value":"object"}},{"kind":"Field","name":{"kind":"Name","value":"prices"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"currency_code"}},{"kind":"Field","name":{"kind":"Name","value":"pricing_model"}},{"kind":"Field","name":{"kind":"Name","value":"free_quantity"}},{"kind":"Field","name":{"kind":"Name","value":"item_family_id"}},{"kind":"Field","name":{"kind":"Name","value":"item_id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"external_name"}},{"kind":"Field","name":{"kind":"Name","value":"price"}},{"kind":"Field","name":{"kind":"Name","value":"period"}},{"kind":"Field","name":{"kind":"Name","value":"period_unit"}},{"kind":"Field","name":{"kind":"Name","value":"is_taxable"}},{"kind":"Field","name":{"kind":"Name","value":"item_type"}},{"kind":"Field","name":{"kind":"Name","value":"object"}},{"kind":"Field","name":{"kind":"Name","value":"metadata"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}}]}}]} as unknown as DocumentNode<GetSubscriptionPlansQuery, GetSubscriptionPlansQueryVariables>;